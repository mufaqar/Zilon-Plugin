<?php 
/*
Plugin Name: ZilonHub Integration
Plugin URI: http://zilonhub.com
Description: Integrates Online Hub with your wordPress store.
Version: 1.1.6
Author: Mufaqar Islam
Author URI: http://mufaqar.com
Text Domain: onlinehub
Generated By: http://zilonhub.com
*/

namespace membersone_integration;


// If this file is called directly, abort. //
if ( ! defined( 'WPINC' ) ) {die;} // end if

// Let's Initialize Everything
if ( file_exists( plugin_dir_path( __FILE__ ) . 'core-init.php' ) ) {
		require_once( plugin_dir_path( __FILE__ ) . 'core-init.php' );
		
}


/**
 * Checks if WooCommerce is installed and activated.
 *
 * @return void
 */
function membersone_integration() {
	if ( ! is_plugin_active( 'woocommerce/woocommerce.php' ) && current_user_can( 'activate_plugins' ) ) {
		wp_die( 'Sorry, but this plugin requires the WooCommerce Plugin to be installed and active.' );
	}
}

register_activation_hook( __FILE__, __NAMESPACE__ . '\\membersone_integration' );







/**
 * Adds data on admin menu page.
 *
 * @return void
 */
function membersone_integration_config() {
	add_menu_page(
		__( 'ZilonHub Configuration', 'membersone-integration' ),
		__( 'ZilonHub Integration', 'membersone-integration' ),
		'manage_options',
		'membersone-integration-plugin',
		__NAMESPACE__ . '\\membersone_integration_init',
		'',
		100
	);

}



add_action( 'wp_ajax_get_order', __NAMESPACE__ . '\\moi_get_order' );
add_action( 'admin_menu', __NAMESPACE__ . '\\membersone_integration_config' );
add_action( 'wp_ajax_get_products', __NAMESPACE__ . '\\moi_get_products' );
add_action( 'wp_ajax_get_category', __NAMESPACE__ . '\\moi_get_category' );
add_action( 'wp_ajax_get_locations', __NAMESPACE__ . '\\moi_get_locations' );
add_action( 'wp_ajax_get_manufacturer', __NAMESPACE__ . '\\moi_get_manufacturer' );
add_action( 'wp_ajax_get_vendors', __NAMESPACE__ . '\\moi_get_vendors' );
add_action( 'wp_ajax_get_department', __NAMESPACE__ . '\\moi_get_department' );
add_action( 'woocommerce_new_order',__NAMESPACE__ . '\\custom_woocommerce_auto_complete_order',10,3 );
add_action( 'woocommerce_checkout_order_processed',  __NAMESPACE__ . '\\create_invoice_for_wc_order', 10, 1 ); 



function custom_woocommerce_auto_complete_order( $order_id ) { 
		if ( ! $order_id ) {
			return;
		}
	 $order = wc_get_order( $order_id );
	 $order->update_status('Completed');
}

function create_invoice_for_wc_order($order_id)
{
  $order = wc_get_order( $order_id );
  $Customer_name  = $order->get_formatted_billing_full_name();
  $phone   =  $order->get_billing_phone();
  $userLoation = get_option('store_location_userdata');
  $userID = $userLoation['userID'];
  $displayName = $userLoation['displayName'];

	$location_data = get_option('store_location_data');
	foreach($location_data as $location)
	{

		$locationID = $location['id'];
		$locationName = $location['name'];

	}

	  // Get Order User, Billing & Shipping Addresses
	  $get_customer_id = 	$order->get_customer_id();
	  $user_id   = $order->get_user_id(); // Get the costumer ID
	  $user      = $order->get_user(); // Get the WP_User object 
	
	
	  $order_customer = $user->data;
		  $userdata = array();
			$userdata = array(
			'Username'    => $order->get_billing_phone(),
			'Password'    => $order_customer->user_pass,
			'email'       => $order_customer->user_email,
			 'FirstName'  => $order->get_billing_first_name(),
			 'LastName'   => $order->get_billing_last_name(),
			 'company'    => $order->get_billing_company(),
			 'Address1'   => $order->get_billing_address_1(),
			 'Address2'   => $order->get_billing_address_2(),
			 'City'       => $order->get_billing_city(),
			 'state'      => $order->get_billing_state(),
			 'PostalCode'    => $order->get_billing_postcode(),
			 'country'    => $order->get_billing_country(),
			 'email'      => $order->get_billing_email(),
			 'Phone'      => $order->get_billing_phone(),
			  'Photo'       => null,
			  'Role'       => array ( '0'  => 'Customer'),
			  'Age'         => null,
			  'Gender'      => null,
			  'PartitionKey'   => $locationID,
			  'BillingAddress'  => array(
					'FirstName'  => $order->get_billing_first_name(),
					'LastName'   => $order->get_billing_last_name(),
					'company'    => $order->get_billing_company(),
					'Address1'   => $order->get_billing_address_1(),
					'Address2'   => $order->get_billing_address_2(),
					'City'       => $order->get_billing_city(),
					'state'      => $order->get_billing_state(),
					'PostalCode'    => $order->get_billing_postcode(),
					'country'    => $order->get_billing_country(),
					'email'      => $order->get_billing_email(),
					'Phone'      => $order->get_billing_phone(),
			  ),
			  'ShippingAddress'  => array(        
				'FirstName'     => $order->get_shipping_first_name(),
				'LastName'      => $order->get_shipping_last_name(),
				'Address1'      => $order->get_shipping_address_1(),
				'Address2'      => $order->get_shipping_address_2(),
				'City'          => $order->get_shipping_city(),
				'Country'       => $order->get_shipping_country(),  
				'state'         => $order->get_shipping_state(),
				'ZipCode'       => $order->get_shipping_postcode(),     
			  ) 
			);


  $userphone = $order->get_billing_phone();
  $url = "/customer-svc/api/SearchCustomer/$userphone";
  $response =  moi_do_curl($url,'GET');			
  	if($response->responseStatusCode == '903') {	
			foreach($response->data as $data){						
				$CustomerId =  $data->userID;
				$firstName =  $data->firstName;
				$lastName =  $data->lastName;
				$email =  $data->email;
				$phone =  $data->phone;
				$id =  $data->id;
				$partitionKey =  $data->partitionKey;	
			}	
  
	  
	}
	else {
			moi_do_curl('/customer-svc/api/Customer','POST',$userdata);
			$searchurl = "/customer-svc/api/SearchCustomer/$userphone";
			$response =  moi_do_curl($searchurl,'GET');	
			if($response->responseStatusCode == '903')	{	
					foreach($response->data as $data)
						{						
							$CustomerId =  $data->userID;
							$firstName =  $data->firstName;
							$lastName =  $data->lastName;
							$email =  $data->email;
							$phone =  $data->phone;
							$id =  $data->id;
							$partitionKey =  $data->partitionKey;
						}		
			}
	}



		function get_order_billing_information( $order, $CustomerId ) {
			$billing[] = array(
			'InvoiceNumber' => "2Y7OZ1HYSX1-".$order->get_id(),
			"CustID"     => $CustomerId,
			'FirstName'  => $order->get_billing_first_name(),
			'LastName'   => $order->get_billing_last_name(),
			'company'    => $order->get_billing_company(),
			'Address1'   => $order->get_billing_address_1(),
			'Address2'   => $order->get_billing_address_2(),
			'City'       => $order->get_billing_city(),
			'state'      => $order->get_billing_state(),
			'ZipCode'    => $order->get_billing_postcode(),
			'country'    => $order->get_billing_country(),
			'email'      => $order->get_billing_email(),
			'Phone'      => $order->get_billing_phone(),
			);
		
			return $billing;
		}

	 


		function get_order_shipping_information( $order ) {
			$shipping[] = array(
				'InvoiceNumber' => "2Y7OZ1HYSX1-".$order->get_id(),
				'FirstName'     => $order->get_shipping_first_name(),
				'LastName'      => $order->get_shipping_last_name(),
				'Address1'      => $order->get_shipping_address_1(),
				'Address2'      => $order->get_shipping_address_2(),
				'City'          => $order->get_shipping_city(),
				'Country'       => $order->get_shipping_country(),  
				'state'         => $order->get_shipping_state(),
				'ZipCode'       => $order->get_shipping_postcode(),
				'Phone'         => '',
				'ShippingCost'   => 0,	
				'Size'   => 'Kg'
			);

			return $shipping;
		}


		
	//$wareHouseId = 1408001; 

	foreach ( $order->get_items() as $item_id => $item ) {
		$product_id = $item->get_product_id(); 	
  
	} 
			
	
	$dp = isset( $filter['dp'] ) ? intval( $filter['dp'] ) : 2;
	$order_data = array(
	  'PartitionKey' => $partitionKey,
	  'LoyaltyAward' => 0,
	  'TaxableTotals' => wc_format_decimal( $order->get_total(), $dp ),
	  'NonTaxableTotals' => 0,
	  'Started' => $order->get_date_created()->format ('Y-m-d H:i:s'),
	  'Ended' => $order->get_date_created()->format ('Y-m-d H:i:s'),
	  'Dated' => $order->get_date_created()->format ('Y-m-d H:i:s'),
	  'TenderedAmount' => wc_format_decimal( $order->get_total(), $dp ),
	  'TotalPaid' => wc_format_decimal( $order->get_total(), $dp ),
	  'Change' => 0,	 
	  'TotalVoidItems' => 0,
	  'PaymentFinalized' => 1,
	  'TotalSaleItems' => $order->get_item_count(),	
	  'Discounts' => array(),
	  'Tenders' => array(
				  array(
					  'Id' => "2Y7OZ1HYSX1-".$order->get_id(),
					  'InvoiceNumber' => "2Y7OZ1HYSX1-".$order->get_id(),
					  'Date' => $order->get_date_created()->format ('Y-m-d H:i:s'),
					  'TenderType' => 'CreditCard',
					  'Amount' => wc_format_decimal( $order->get_total(), $dp ),
					  'Balance' => 0,
					  'Status' => 'Done',
				  )
  
	  ),
	  'TaxRate' => ( ! empty( $item['tax_class'] ) ) ? $item['tax_class'] : 0,
	  'ProductNotes' => array(),
	  'GrandTotal'   => wc_format_decimal( $order->get_total(), $dp ),
	  'Discount'    => 0,
	  'InvoiceNumber' => "2Y7OZ1HYSX1-".$order->get_id(),
	  'CustomerId'   => $CustomerId,
	  'CustomerName' => $Customer_name,
	  'CustomerPhone' => $phone,
	  'LocationId'   => $locationID,
	  'LocationName' => $locationName,
	  'RegisterId' =>  $locationID,
	  'RegisterName' => $locationName,
	  'UserId'    => $userID,
	  'UserName'  => $displayName,
	  'IsReturned' => 'true',
	  'TaxExempt' => 'false',
	  'PostedStatus' => 2, // Failed , complete etc 
	  'InvoiceType' => 'Sale',
	  'SubTotal' => wc_format_decimal( $order->get_total(), $dp ),
	  'SalesTax' => $order->get_total_tax(),
	  'ElectronicTenders' => array(),
	  "IsCustomerOver18"=>false,
	  "IsCustomerOver21"=>false,
	  'ItemCount' => $order->get_item_count(),
	  'InvoiceShipping'  => get_order_shipping_information( $order , $CustomerId),
	  'InvoiceBilling'   => get_order_billing_information( $order , $CustomerId),
	  'ShippingStatus'   => "PendingDelivery",
	  'IsOnlineOrder'    => True
	
	  
	  );



	/**
	   * Getting all line items.
	   */
	  foreach ( $order->get_items() as $item_id => $item ) {
		$product     = $order->get_product_from_item( $item );
		$product_id  = $product->id;
		$productCode        = get_post_meta( $product_id, 'productCode', true ); 
		$allownegativestock = get_post_meta( $product_id, 'allownegativestock',true ); 
		$trackstock         = get_post_meta( $product_id, 'trackstock', true ); 
		$barcode            = get_post_meta( $product_id, 'barcode', true ); 
		$costPrice          = get_post_meta( $product_id, 'costPrice' ,true ); 
		$salepricea         = get_post_meta( $product_id, 'salepricea' ,true ); 
		$salePriceB         = get_post_meta( $product_id, 'salePriceB' ,true ); 
		$salePriceC         = get_post_meta( $product_id, 'salePriceC' ,true ); 
		$categoryName       = get_post_meta( $product_id, 'categoryName' ,true ); 
		$manufacturerName   = get_post_meta( $product_id, 'manufacturerName' ,true ); 
		$vendorName         = get_post_meta( $product_id, 'vendorName' ,true ); 
		$departmentName     = get_post_meta( $product_id, 'departmentName' ,true ); 
		$ageRestriction     = get_post_meta( $product_id, 'ageRestriction' ,true ); 
		$allowDiscount      = get_post_meta( $product_id, 'allowDiscount' ,true ); 
		$gender             = get_post_meta( $product_id, 'gender' ,true ); 
		$grouping           = get_post_meta( $product_id, 'grouping' ,true ); 
		$id                 = get_post_meta( $product_id, 'id' ,true ); 
		$itemid             = get_post_meta( $product_id, 'itemid' ,true ); 
		$isTaxable          = get_post_meta( $product_id, 'isTaxable' ,true ); 			
		$isActive           = get_post_meta( $product_id, 'isActive' ,true ); 
		$isOpnDept          = get_post_meta( $product_id, 'isOpnDept' ,true ); 
		$itemType           = get_post_meta( $product_id, 'itemType' ,true ); 
		$soldAs             = get_post_meta( $product_id, 'soldAs' ,true ); 
		$caseQty            = get_post_meta( $product_id, 'caseQty' ,true ); 
		$defaultPrice       = get_post_meta( $product_id, 'defaultPrice' ,true ); 
		$isDefault          = get_post_meta( $product_id, 'isDefault' ,true ); 
		$isVisible          = get_post_meta( $product_id, 'isVisible' ,true ); 
		$taxable            = get_post_meta( $product_id, 'taxable' ,true ); 
		$uomId              = get_post_meta( $product_id, 'uomId' ,true ); 			
		$quantity           = get_post_meta( $product_id, 'quantity' ,true ); 
		$sellQuantity       = get_post_meta( $product_id, 'sellQuantity' ,true ); 				
		$_sku               = get_post_meta( $product_id, '_sku' ,true ); 
		$_price             = get_post_meta( $product_id, '_price' ,true ); 
		$_regular_price     = get_post_meta( $product_id, '_regular_price' ,true ); 	
		$_sale_price        = get_post_meta( $product_id, '_sale_price',true ); 
		$warehouseid        = get_post_meta( $product_id, 'warehouseid',true); 
		$_stock             = get_post_meta( $product_id, '_stock' ,true ); 
		$product_sku        = get_post_meta( $product_id, '_sku' ,true ); 
		$categoryId         = get_post_meta( $product_id, 'categoryId' ,true ); 
		$departmentId       = get_post_meta( $product_id, 'departmentId' ,true ); 
		$itemSKUId         = get_post_meta( $product_id, 'itemSKUId' ,true ); 
 
		$order_data['InvoiceItems'][] = array(
						'LineTax' => wc_format_decimal( $item['line_tax'], $dp ),
						'LineDiscount' => 0,
						'LineTotal' => wc_format_decimal( $order->get_line_total( $item, false, false ), $dp ),
						'Subtotal' =>  wc_format_decimal( $order->get_line_total( $item, false, false ), $dp ),
						'IsTaxable' => true,
						'InvoiceType' => "Sale",
						'LinePrice' => wc_format_decimal( $order->get_line_total( $item, false, false ), $dp ),//  Total
						'UOMId' => $uomId,
						'SoldAs' =>  $soldAs,     
						'Cost' => wc_format_decimal( $order->get_line_total( $item, false, false ), $dp ),
						'TaxRate' => ( ! empty( $item['tax_class'] ) ) ? $item['tax_class'] : 0,
						'Tax' => wc_format_decimal( $item['line_tax'], $dp ),
						'Discount' => 0,
						'CaseQty' => wc_stock_amount( $item['qty'] ),      
						'Discounts' => Array(),
						'SellQuantity' => $sellQuantity,
						'Price' =>  wc_format_decimal( $order->get_item_total( $item, false, false ), $dp ),		// Item Price	
						'Image' => wp_get_attachment_image_src( get_post_thumbnail_id( $product_id ), 'thumbnail', true )[0],
						'ItemName' => $item['name'],
						'SKUCode' => $product_sku,
						'ItemId' =>   $itemid,
						'itemSKUId'  => $itemSKUId,
						'CategoryId'   => $categoryId,
						'DepartmentId' => $departmentId,
						'InvoiceNumber' => "2Y7OZ1HYSX1-".$order->get_id(),
						'InvoiceItemId' => 1,
						'Qty' =>  $item->get_quantity(),
						'SoldUnit' => 1,
		);	
	}
		$response = moi_do_curl('/order-svc/api/Invoice/SaveInvoice?commitQty=True','POST',$order_data);
		$my_post = array(
			'post_title'    => $order_id,
			'post_content'  => json_encode($response).json_encode($order_data) ,
			'post_status'   => 'publish'		
		);		
		wp_insert_post( $my_post );
			

};   // end Order



function moi_get_products()
{ 
	
	$store_loc = get_option('store_location');

	$url = "/inventory-svc/api/InventoryItem/GetInventoryItems?warehouseId=$store_loc&pageNo=0&pageSize=20&sellOnline=True";	
	
	$response = moi_do_curl($url,'GET');

		

		function getImage($url) {
						include_once( ABSPATH . 'wp-admin/includes/image.php' );
						$imageurl = $url;        
						$imagetype = end(explode('/', getimagesize($imageurl)['mime']));
						$uniq_name = date('dmY').''.(int) microtime(true); 
						$filename = $uniq_name.'.'.$imagetype;
						$uploaddir = wp_upload_dir();
						$uploadfile = $uploaddir['path'] . '/' . $filename;
						$contents= file_get_contents($imageurl);
						$savefile = fopen($uploadfile, 'w');
						fwrite($savefile, $contents);
						fclose($savefile);

						$wp_filetype = wp_check_filetype(basename($filename), null );
						$attachment = array(
							'post_mime_type' => $wp_filetype['type'],
							'post_title' => $filename,
							'post_content' => '',
							'post_status' => 'inherit'
								);

						$attach_id = wp_insert_attachment( $attachment, $uploadfile );
						$imagenew = get_post( $attach_id );
						$fullsizepath = get_attached_file( $imagenew->ID );
						$attach_data = wp_generate_attachment_metadata( $attach_id, $fullsizepath );
						wp_update_attachment_metadata( $attach_id, $attach_data ); 

						return $attach_id;


						}

		function get_termId($catId , $termName) {
							$targs = array(
							'hide_empty' => false, 
							'meta_query' => array(
								array(
									'key'       => 't_id',
									'value'     => $catId,
									'compare'   => '='
								)
							),
							'taxonomy'  => $termName,
							);
							$get_terms = get_terms( $targs );                   
							foreach($get_terms as $term)
									{  $termId = $term->term_id;  }
							return $termId;
				}
 


 //	$apiproducts = $response->data;

 	if($response->success==true)	{

	
		foreach($response->data as $apiproduct) {	

			$itemName = $apiproduct->itemName;
			$allowNegativeStock = $apiproduct->allowNegativeStock;		
			$description = $apiproduct->description;
			$id = $apiproduct->id;
			$isActive = $apiproduct->isActive;
			$trackStock = $apiproduct->trackStock;
			$itemId = $apiproduct->itemId;
			$itemSKUId = $apiproduct->itemSKUId;		
			$productCode = $apiproduct->productCode;
			$itemType = $apiproduct->itemType;
			$image_url = $apiproduct->image;
			$barcode = $apiproduct->barcode;		
			$costPrice = $apiproduct->costPrice;
			$isDefault = $apiproduct->isDefault;
			$isTaxable = $apiproduct->isTaxable;
			$isVisible = $apiproduct->isVisible;
			$categoryName = $apiproduct->categoryName;
			$manufacturerName = $apiproduct->manufacturerName;
			$vendorName = $apiproduct->vendorName;
			$departmentName = $apiproduct->departmentName;
			$salePrice = $apiproduct->salePrice;
			$salePriceA = $apiproduct->salePriceA;
			$salePriceB = $apiproduct->salePriceB;
			$salePriceC = $apiproduct->salePriceC;
			$caseQty = $apiproduct->caseQty;
			$defaultPrice = $apiproduct->defaultPrice;	
			$sellQuantity = $apiproduct->sellQuantity;
			$skuCode = $apiproduct->skuCode;
			$uomId = $apiproduct->uomId;			
			$ageRestriction = $apiproduct->ageRestriction;
			$allowDiscount = $apiproduct->allowDiscount;
			$gender = $apiproduct->gender;
			$grouping = $apiproduct->grouping;
			$isOpnDept = $apiproduct->isOpnDept;
			$isTaxable = $apiproduct->isTaxable;
			$notes = $apiproduct->notes;
			$soldAs = $apiproduct->soldAs;
			$manufacturerId = $apiproduct->manufacturerId;
			$departmentId = $apiproduct->departmentId;
			$categoryId = $apiproduct->categoryId;
			$vendorId = $apiproduct->vendorId;
			$wareHouseId = $apiproduct->wareHouseId;
			$quantity = $apiproduct->quantity;
			$itemPictures =  $apiproduct->itemPictures;	
			$gallerypics = array(); 
					foreach($itemPictures as $galleryitems)
					{
						$galleryUrl = $galleryitems->picture;
						$gallerypics[] = getImage($galleryUrl);	
					}
				$galleryIds =  implode(",",$gallerypics);
		

			
			if($defaultPrice == '1')
			{

				$Sale_Price  = $salePriceA;
			}
			elseif($defaultPrice == '2') {
				$Sale_Price  = $salePriceB;
			}
			else {
				$Sale_Price  = $salePriceC;
			}

		
			

			//echo $Sale_Price;		

			$f_categoryId = get_termId($categoryId ,'product_cat');  
			$f_manufacturerId = get_termId($manufacturerId ,'manufacturer');   
			$f_vendorId = get_termId($vendorId ,'vendors');   
			$f_departmentId = get_termId($departmentId ,'department');  
			$f_location_id = get_termId($wareHouseId ,'product_location');  
			
			
				
				
		
			

			if (get_page_by_title($itemName, OBJECT, 'product')) {

				// Update Product

				$check_title = get_page_by_title($itemName, 'OBJECT', 'product');
				$u_product_id = $check_title->ID;	
				$upate_product = array(
						'ID'           => $u_product_id,
						'post_status'   => 'publish',
						'post_content'   => $description,
						'post_excerpt'   => $notes,		
						
					);
				$feature_image = getImage($image_url);
				wp_update_post( $upate_product );
				set_post_thumbnail($u_product_id, $feature_image);
				set_post_thumbnail($u_product_id, $feature_image);	
				wp_set_post_terms($u_product_id, array($f_location_id), 'product_location' );
				wp_set_post_terms($u_product_id, array($f_manufacturerId), 'manufacturer' );
				wp_set_post_terms($u_product_id, array($f_vendorId), 'vendors' );
				wp_set_post_terms($u_product_id, array($f_departmentId), 'department' );
				wp_set_post_terms($u_product_id, array($f_categoryId), 'product_cat');
				update_post_meta( $u_product_id, 'productCode', $productCode ); 
				update_post_meta( $u_product_id, 'itemSKUId', $itemSKUId ); 
				update_post_meta( $u_product_id, 'allowNegativeStock', $allowNegativeStock ); 
				update_post_meta( $u_product_id, 'trackStock', $trackStock ); 
				update_post_meta( $u_product_id, 'barcode', $barcode ); 
				update_post_meta( $u_product_id, 'costPrice', $costPrice ); 
				update_post_meta( $u_product_id, 'salePriceA', $salePriceA ); 
				update_post_meta( $u_product_id, 'salePriceB', $salePriceB ); 
				update_post_meta( $u_product_id, 'salePriceC', $salePriceC ); 
				update_post_meta( $u_product_id, 'categoryName', $categoryName ); 
				update_post_meta( $u_product_id, 'manufacturerName', $manufacturerName ); 
				update_post_meta( $u_product_id, 'vendorName', $vendorName ); 
				update_post_meta( $u_product_id, 'departmentName', $departmentName ); 
				update_post_meta( $u_product_id, 'ageRestriction', $ageRestriction ); 
				update_post_meta( $u_product_id, 'allowDiscount', $allowDiscount ); 
				update_post_meta( $u_product_id, 'gender', $gender ); 
				update_post_meta( $u_product_id, 'grouping', $grouping ); 
				update_post_meta( $u_product_id, 'id', $id ); 
				update_post_meta( $u_product_id, 'itemid', $itemId ); 
				update_post_meta( $u_product_id, 'isTaxable', $isTaxable ); 			
				update_post_meta( $u_product_id, 'isActive', $isActive ); 
				update_post_meta( $u_product_id, 'isOpnDept', $isOpnDept ); 
				update_post_meta( $u_product_id, 'itemType', $itemType ); 
				update_post_meta( $u_product_id, 'soldAs', $soldAs ); 
				update_post_meta( $u_product_id, 'caseQty', $caseQty ); 
				update_post_meta( $u_product_id, 'defaultPrice', $defaultPrice ); 
				update_post_meta( $u_product_id, 'isDefault', $isDefault ); 
				update_post_meta( $u_product_id, 'isVisible', $isVisible ); 
				update_post_meta( $u_product_id, 'taxable', $taxable ); 
				update_post_meta( $u_product_id, 'uomId', $uomId ); 
				update_post_meta( $u_product_id, 'sellQuantity', $sellQuantity ); 
				update_post_meta( $u_product_id, '_product_image_gallery', $galleryIds);					
				update_post_meta( $u_product_id, '_sku', $skuCode);
				update_post_meta( $u_product_id, '_price', $salePriceA);
				update_post_meta( $u_product_id, '_regular_price', $salePriceA);	
				update_post_meta( $u_product_id, '_sale_price', $Sale_Price);
				update_post_meta( $u_product_id, '_product_image_gallery', $galleryIds);	
				update_post_meta( $u_product_id, 'wareHouseId', $wareHouseId , false);
				update_post_meta( $u_product_id, '_manage_stock', true);
				update_post_meta( $u_product_id, '_stock', $quantity);
				update_post_meta( $u_product_id, 'manufacturerId', $manufacturerId);
				update_post_meta( $u_product_id, 'departmentId', $departmentId);
				update_post_meta( $u_product_id, 'categoryId', $categoryId);
				update_post_meta( $u_product_id, 'vendorId', $vendorId);

				if($allowNegativeStock == 'true' )
				{
					
					update_post_meta( $u_product_id, '_stock', 0);
					update_post_meta($product_id, '_stock_status', 'instock');
				}
				else {
					update_post_meta( $u_product_id, 'quantity', $quantity ); 	
					update_post_meta( $u_product_id, '_stock', $quantity);
		
		
				}



			// echo "Update Product";
			
			}
			else
			{

				// Add New Product

				
						$feature_image = getImage($image_url);
						$postarg = array(
							'post_author' => '1',
							'post_status' => "publish",
							'post_title' => $itemName,
							'post_parent' => '',
							'post_content'   => $description,
							'post_excerpt'   => $notes,
							'post_type' => "product",
						);
						$post_id = wp_insert_post($postarg);
						set_post_thumbnail($post_id, $feature_image);	
						wp_set_post_terms($post_id, array($f_location_id), 'product_location' );
						wp_set_post_terms($post_id, array($f_manufacturerId), 'manufacturer' );
						wp_set_post_terms($post_id, array($f_vendorId), 'vendors' );
						wp_set_post_terms($post_id, array($f_departmentId), 'department' );
						wp_set_post_terms($post_id, array($f_categoryId), 'product_cat');
						add_post_meta( $post_id, 'productCode', $productCode ); 
						add_post_meta( $post_id, 'itemSKUId', $itemSKUId ); 			
						add_post_meta( $post_id, 'allownegativestock', $allowNegativeStock ); 
						add_post_meta( $post_id, 'trackstock', $trackStock ); 
						add_post_meta( $post_id, 'barcode', $barcode ); 
						add_post_meta( $post_id, 'costPrice', $costPrice ); 
						add_post_meta( $post_id, 'salepricea', $salePriceA ); 
						add_post_meta( $post_id, 'salePriceB', $salePriceB ); 
						add_post_meta( $post_id, 'salePriceC', $salePriceC ); 
						add_post_meta( $post_id, 'categoryName', $categoryName ); 
						add_post_meta( $post_id, 'manufacturerName', $manufacturerName ); 
						add_post_meta( $post_id, 'vendorName', $vendorName ); 
						add_post_meta( $post_id, 'departmentName', $departmentName ); 
						add_post_meta( $post_id, 'ageRestriction', $ageRestriction ); 
						add_post_meta( $post_id, 'allowDiscount', $allowDiscount ); 
						add_post_meta( $post_id, 'gender', $gender ); 
						add_post_meta( $post_id, 'grouping', $grouping ); 
						add_post_meta( $post_id, 'id', $id ); 
						add_post_meta( $post_id, 'itemid', $itemId ); 
						add_post_meta( $post_id, 'isTaxable', $isTaxable ); 			
						add_post_meta( $post_id, 'isActive', $isActive ); 
						add_post_meta( $post_id, 'isOpnDept', $isOpnDept ); 
						add_post_meta( $post_id, 'itemType', $itemType ); 
						add_post_meta( $post_id, 'soldAs', $soldAs ); 
						add_post_meta( $post_id, 'caseQty', $caseQty ); 
						add_post_meta( $post_id, 'defaultPrice', $defaultPrice ); 
						add_post_meta( $post_id, 'isDefault', $isDefault ); 
						add_post_meta( $post_id, 'isVisible', $isVisible ); 
						add_post_meta( $post_id, 'taxable', $taxable ); 
						add_post_meta( $post_id, 'uomId', $uomId ); 
						add_post_meta( $post_id, 'sellQuantity', $sellQuantity ); 				
						add_post_meta( $post_id, '_sku', $skuCode);
						add_post_meta( $post_id, '_price', $salePriceA);
						add_post_meta( $post_id, '_regular_price', $salePriceA);	
						add_post_meta( $post_id, '_sale_price', $Sale_Price);
						add_post_meta( $post_id, '_product_image_gallery', $galleryIds);
						add_post_meta( $post_id, 'wareHouseId', $wareHouseId);				
						add_post_meta( $post_id, 'manufacturerId', $manufacturerId);
						add_post_meta( $post_id, 'departmentId', $departmentId);
						add_post_meta( $post_id, 'categoryId', $categoryId);
						add_post_meta( $post_id, 'vendorId', $vendorId);

						if($allowNegativeStock == 'true' )
								{
									
									update_post_meta( $post_id, '_stock', 0);
									update_post_meta($post_id, '_stock_status', 'instock');
								}
								else {
									update_post_meta( $post_id, 'quantity', $quantity ); 	
									update_post_meta( $post_id, '_stock', $quantity);
						
						
								}
					// echo "Add Product";

			
			}		
		}

		echo json_encode(array('code' => 200,'record' => 'Products Added Sucessfully'));
		die();
	

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
		die();
	}
	
 
}


function updated_inventory_items($last_import)
{ 

	

	$store_loc = get_option('store_location');
	$url = "/inventory-svc/api/InventoryItem/GetInventoryItems?warehouseId=$store_loc&pageNo=0&pageSize=2000&checkUpdate=true&lastSyncDateTime=$last_import";
	$url = str_replace(" ","T",$url); 
	$response = moi_do_curl($url,'GET');

	
	 	

	function getImage($url) {
		include_once( ABSPATH . 'wp-admin/includes/image.php' );
		$imageurl = $url;        
		$imagetype = end(explode('/', getimagesize($imageurl)['mime']));
		$uniq_name = date('dmY').''.(int) microtime(true); 
		$filename = $uniq_name.'.'.$imagetype;
		$uploaddir = wp_upload_dir();
		$uploadfile = $uploaddir['path'] . '/' . $filename;
		$contents= file_get_contents($imageurl);
		$savefile = fopen($uploadfile, 'w');
		fwrite($savefile, $contents);
		fclose($savefile);

		$wp_filetype = wp_check_filetype(basename($filename), null );
		$attachment = array(
			'post_mime_type' => $wp_filetype['type'],
			'post_title' => $filename,
			'post_content' => '',
			'post_status' => 'inherit'
				);

		$attach_id = wp_insert_attachment( $attachment, $uploadfile );
		$imagenew = get_post( $attach_id );
		$fullsizepath = get_attached_file( $imagenew->ID );
		$attach_data = wp_generate_attachment_metadata( $attach_id, $fullsizepath );
		wp_update_attachment_metadata( $attach_id, $attach_data ); 

		return $attach_id;


		}

	function get_termId($catId , $termName) {
			$targs = array(
			'hide_empty' => false, 
			'meta_query' => array(
				array(
					'key'       => 't_id',
					'value'     => $catId,
					'compare'   => '='
				)
			),
			'taxonomy'  => $termName,
			);
			$get_terms = get_terms( $targs );                   
			foreach($get_terms as $term)
					{  $termId = $term->term_id;  }
			return $termId;
		}



	//	$apiproducts = $response->data;

	if($response->success==true)	
	{

		foreach($response->data as $apiproduct)
		 {	

				$itemName = $apiproduct->itemName;
				$allowNegativeStock = $apiproduct->allowNegativeStock;		
				$description = $apiproduct->description;
				$id = $apiproduct->id;
				$isActive = $apiproduct->isActive;
				$trackStock = $apiproduct->trackStock;
				$itemId = $apiproduct->itemId;
				$itemSKUId = $apiproduct->itemSKUId;		
				$productCode = $apiproduct->productCode;
				$itemType = $apiproduct->itemType;
				$image_url = $apiproduct->image;
				$barcode = $apiproduct->barcode;		
				$costPrice = $apiproduct->costPrice;
				$isDefault = $apiproduct->isDefault;
				$isTaxable = $apiproduct->isTaxable;
				$isVisible = $apiproduct->isVisible;
				$categoryName = $apiproduct->categoryName;
				$manufacturerName = $apiproduct->manufacturerName;
				$vendorName = $apiproduct->vendorName;
				$departmentName = $apiproduct->departmentName;
				$salePrice = $apiproduct->salePrice;
				$salePriceA = $apiproduct->salePriceA;
				$salePriceB = $apiproduct->salePriceB;
				$salePriceC = $apiproduct->salePriceC;
				$caseQty = $apiproduct->caseQty;
				$defaultPrice = $apiproduct->defaultPrice;	
				$sellQuantity = $apiproduct->sellQuantity;
				$skuCode = $apiproduct->skuCode;
				$uomId = $apiproduct->uomId;			
				$ageRestriction = $apiproduct->ageRestriction;
				$allowDiscount = $apiproduct->allowDiscount;
				$gender = $apiproduct->gender;
				$grouping = $apiproduct->grouping;
				$isOpnDept = $apiproduct->isOpnDept;
				$isTaxable = $apiproduct->isTaxable;
				$notes = $apiproduct->notes;
				$soldAs = $apiproduct->soldAs;
				$manufacturerId = $apiproduct->manufacturerId;
				$departmentId = $apiproduct->departmentId;
				$categoryId = $apiproduct->categoryId;
				$vendorId = $apiproduct->vendorId;
				$wareHouseId = $apiproduct->wareHouseId;
				$quantity = $apiproduct->quantity;
				$itemPictures =  $apiproduct->itemPictures;	
				$gallerypics = array(); 
				foreach($itemPictures as $galleryitems)
					{
						$galleryUrl = $galleryitems->picture;
						$gallerypics[] = getImage($galleryUrl);	
					}
				$galleryIds =  implode(",",$gallerypics);



				if($defaultPrice == '1')
				{

				$Sale_Price  = $salePriceA;
				}
				elseif($defaultPrice == '2') {
				$Sale_Price  = $salePriceB;
				}
				else {
				$Sale_Price  = $salePriceC;
				}
			
				$f_categoryId = get_termId($categoryId ,'product_cat');  
				$f_manufacturerId = get_termId($manufacturerId ,'manufacturer');   
				$f_vendorId = get_termId($vendorId ,'vendors');   
				$f_departmentId = get_termId($departmentId ,'department');  
				$f_location_id = get_termId($wareHouseId ,'product_location');  

				if (get_page_by_title($itemName, OBJECT, 'product')) {

						// Update Product

						$check_title = get_page_by_title($itemName, 'OBJECT', 'product');
						$u_product_id = $check_title->ID;	
						$upate_product = array(
							'ID'           => $u_product_id,
							'post_status'   => 'publish',
							'post_content'   => $description,
							'post_excerpt'   => $notes,		
							
							);
						$feature_image = getImage($image_url);
						wp_update_post( $upate_product );
						set_post_thumbnail($u_product_id, $feature_image);
						set_post_thumbnail($u_product_id, $feature_image);	
						wp_set_post_terms($u_product_id, array($f_location_id), 'product_location' );
						wp_set_post_terms($u_product_id, array($f_manufacturerId), 'manufacturer' );
						wp_set_post_terms($u_product_id, array($f_vendorId), 'vendors' );
						wp_set_post_terms($u_product_id, array($f_departmentId), 'department' );
						wp_set_post_terms($u_product_id, array($f_categoryId), 'product_cat');
						update_post_meta( $u_product_id, 'productCode', $productCode ); 
						update_post_meta( $u_product_id, 'itemSKUId', $itemSKUId ); 
						update_post_meta( $u_product_id, 'allowNegativeStock', $allowNegativeStock ); 
						update_post_meta( $u_product_id, 'trackStock', $trackStock ); 
						update_post_meta( $u_product_id, 'barcode', $barcode ); 
						update_post_meta( $u_product_id, 'costPrice', $costPrice ); 
						update_post_meta( $u_product_id, 'salePriceA', $salePriceA ); 
						update_post_meta( $u_product_id, 'salePriceB', $salePriceB ); 
						update_post_meta( $u_product_id, 'salePriceC', $salePriceC ); 
						update_post_meta( $u_product_id, 'categoryName', $categoryName ); 
						update_post_meta( $u_product_id, 'manufacturerName', $manufacturerName ); 
						update_post_meta( $u_product_id, 'vendorName', $vendorName ); 
						update_post_meta( $u_product_id, 'departmentName', $departmentName ); 
						update_post_meta( $u_product_id, 'ageRestriction', $ageRestriction ); 
						update_post_meta( $u_product_id, 'allowDiscount', $allowDiscount ); 
						update_post_meta( $u_product_id, 'gender', $gender ); 
						update_post_meta( $u_product_id, 'grouping', $grouping ); 
						update_post_meta( $u_product_id, 'id', $id ); 
						update_post_meta( $u_product_id, 'itemid', $itemId ); 
						update_post_meta( $u_product_id, 'isTaxable', $isTaxable ); 			
						update_post_meta( $u_product_id, 'isActive', $isActive ); 
						update_post_meta( $u_product_id, 'isOpnDept', $isOpnDept ); 
						update_post_meta( $u_product_id, 'itemType', $itemType ); 
						update_post_meta( $u_product_id, 'soldAs', $soldAs ); 
						update_post_meta( $u_product_id, 'caseQty', $caseQty ); 
						update_post_meta( $u_product_id, 'defaultPrice', $defaultPrice ); 
						update_post_meta( $u_product_id, 'isDefault', $isDefault ); 
						update_post_meta( $u_product_id, 'isVisible', $isVisible ); 
						update_post_meta( $u_product_id, 'taxable', $taxable ); 
						update_post_meta( $u_product_id, 'uomId', $uomId ); 
						update_post_meta( $u_product_id, 'sellQuantity', $sellQuantity ); 
						update_post_meta( $u_product_id, '_product_image_gallery', $galleryIds);					
						update_post_meta( $u_product_id, '_sku', $skuCode);
						update_post_meta( $u_product_id, '_price', $salePriceA);
						update_post_meta( $u_product_id, '_regular_price', $salePriceA);	
						update_post_meta( $u_product_id, '_sale_price', $Sale_Price);
						update_post_meta( $u_product_id, '_product_image_gallery', $galleryIds);	
						update_post_meta( $u_product_id, 'wareHouseId', $wareHouseId , false);
						update_post_meta( $u_product_id, '_manage_stock', true);
						update_post_meta( $u_product_id, '_stock', $quantity);
						update_post_meta( $u_product_id, 'manufacturerId', $manufacturerId);
						update_post_meta( $u_product_id, 'departmentId', $departmentId);
						update_post_meta( $u_product_id, 'categoryId', $categoryId);
						update_post_meta( $u_product_id, 'vendorId', $vendorId);

						if($allowNegativeStock == 'true' )
							{

								update_post_meta( $u_product_id, '_stock', 0);
								update_post_meta($product_id, '_stock_status', 'instock');
							}
						else {
								update_post_meta( $u_product_id, 'quantity', $quantity ); 	
								update_post_meta( $u_product_id, '_stock', $quantity);


							}



						// echo "Update Product";

				}
				else  {

						// Add New Product


							$feature_image = getImage($image_url);
							$postarg = array(
								'post_author' => '1',
								'post_status' => "publish",
								'post_title' => $itemName,
								'post_parent' => '',
								'post_content'   => $description,
								'post_excerpt'   => $notes,
								'post_type' => "product",
							);
							$post_id = wp_insert_post($postarg);
							set_post_thumbnail($post_id, $feature_image);	
							wp_set_post_terms($post_id, array($f_location_id), 'product_location' );
							wp_set_post_terms($post_id, array($f_manufacturerId), 'manufacturer' );
							wp_set_post_terms($post_id, array($f_vendorId), 'vendors' );
							wp_set_post_terms($post_id, array($f_departmentId), 'department' );
							wp_set_post_terms($post_id, array($f_categoryId), 'product_cat');
							add_post_meta( $post_id, 'productCode', $productCode ); 
							add_post_meta( $post_id, 'itemSKUId', $itemSKUId ); 			
							add_post_meta( $post_id, 'allownegativestock', $allowNegativeStock ); 
							add_post_meta( $post_id, 'trackstock', $trackStock ); 
							add_post_meta( $post_id, 'barcode', $barcode ); 
							add_post_meta( $post_id, 'costPrice', $costPrice ); 
							add_post_meta( $post_id, 'salepricea', $salePriceA ); 
							add_post_meta( $post_id, 'salePriceB', $salePriceB ); 
							add_post_meta( $post_id, 'salePriceC', $salePriceC ); 
							add_post_meta( $post_id, 'categoryName', $categoryName ); 
							add_post_meta( $post_id, 'manufacturerName', $manufacturerName ); 
							add_post_meta( $post_id, 'vendorName', $vendorName ); 
							add_post_meta( $post_id, 'departmentName', $departmentName ); 
							add_post_meta( $post_id, 'ageRestriction', $ageRestriction ); 
							add_post_meta( $post_id, 'allowDiscount', $allowDiscount ); 
							add_post_meta( $post_id, 'gender', $gender ); 
							add_post_meta( $post_id, 'grouping', $grouping ); 
							add_post_meta( $post_id, 'id', $id ); 
							add_post_meta( $post_id, 'itemid', $itemId ); 
							add_post_meta( $post_id, 'isTaxable', $isTaxable ); 			
							add_post_meta( $post_id, 'isActive', $isActive ); 
							add_post_meta( $post_id, 'isOpnDept', $isOpnDept ); 
							add_post_meta( $post_id, 'itemType', $itemType ); 
							add_post_meta( $post_id, 'soldAs', $soldAs ); 
							add_post_meta( $post_id, 'caseQty', $caseQty ); 
							add_post_meta( $post_id, 'defaultPrice', $defaultPrice ); 
							add_post_meta( $post_id, 'isDefault', $isDefault ); 
							add_post_meta( $post_id, 'isVisible', $isVisible ); 
							add_post_meta( $post_id, 'taxable', $taxable ); 
							add_post_meta( $post_id, 'uomId', $uomId ); 
							add_post_meta( $post_id, 'sellQuantity', $sellQuantity ); 				
							add_post_meta( $post_id, '_sku', $skuCode);
							add_post_meta( $post_id, '_price', $salePriceA);
							add_post_meta( $post_id, '_regular_price', $salePriceA);	
							add_post_meta( $post_id, '_sale_price', $Sale_Price);
							add_post_meta( $post_id, '_product_image_gallery', $galleryIds);
							add_post_meta( $post_id, 'wareHouseId', $wareHouseId);				
							add_post_meta( $post_id, 'manufacturerId', $manufacturerId);
							add_post_meta( $post_id, 'departmentId', $departmentId);
							add_post_meta( $post_id, 'categoryId', $categoryId);
							add_post_meta( $post_id, 'vendorId', $vendorId);

							if($allowNegativeStock == 'true' )
									{							
										update_post_meta( $post_id, '_stock', 0);
										update_post_meta($post_id, '_stock_status', 'instock');
									}
									else {
										update_post_meta( $post_id, 'quantity', $quantity ); 	
										update_post_meta( $post_id, '_stock', $quantity);
							
							
									}
						// echo "Add Product";


				}	
				
				
				
			
		}

	

	}

	$post = array(
		'post_title' => "Items Updated  -" . $last_import,
		'post_content'  => json_encode($response) ,
		'post_status' => 'publish',
		'post_type' => 'jobs',
		);

	 $post_id = wp_insert_post($post);
	 add_post_meta( $post_id, 'url', $url ); 
		

		 
}
	

function update_products_stock($last_import){ 
	
	$store_loc = get_option('store_location');

	$url = "/inventory-svc/api/InventoryItem/GetUpdatedInventoryItems?warehouseId=$store_loc&lastSyncDateTime=$last_import&pageNo=0&pageSize=2000";
	$url = str_replace(" ","T",$url); 
	$response = moi_do_curl($url,'GET');
	
	if($response->success==true){	
		
		foreach($response->data as $apiproduct) {	
			
			$quantity = $apiproduct->quantity;
	
			if (get_page_by_title($itemName, OBJECT, 'product')) {
				// Update  Product Stock	
				$check_title = get_page_by_title($itemName, 'OBJECT', 'product');
				$u_product_id = $check_title->ID;					 			
				update_post_meta( $u_product_id, 'quantity', $quantity ); 				
				update_post_meta( $u_product_id, '_stock', $quantity);
				
			   // echo "Update Product";
			
			}
				
		}	
	
	}

	$post = array(
		'post_title' => "Stock Updated  -" . $last_import,
		'post_content' => json_encode($response),
		'post_status' => 'publish',
		'post_type' => 'jobs',
		);



	 $post_id = wp_insert_post($post);
	 add_post_meta( $post_id, 'url', $url ); 
	
		
	 
}
	

function moi_get_department()
{
	$response = moi_do_curl('/inventory-svc/api/Department','GET');
	if($response->success==true)
	{
		
		foreach($response->data as $data)
		{  

		$departmentName = $data->departmentName;
		$departmentId = $data->id;
		$cat_exists  = term_exists( $departmentName, $taxonomy = 'department', $parent = null );
		$cat_id = $cat_exists['term_id'];
        if(isset($cat_exists))
            {
                update_term_meta( $cat_id, "t_id" , $departmentId );             
            
            }
        else {      
          
         
           $categoryslug = str_replace(" ", "-", strtolower($data->vendorName));
           $cid = wp_insert_term( $data->departmentName, 'department', array('slug' => $categoryslug ) ); 
         
          if (! is_wp_error( $cid ) )
            {
                
                $l_term = isset( $cid['term_id'] ) ? $cid['term_id'] : 0;
                add_term_meta( $l_term, "t_id" , $departmentId ); 
                
            }
            else
            {
                // Trouble in Paradise:
                echo $cid->get_error_message();
            }

			}
		}
		echo json_encode(array('code' => 200,'record' => 'Departments Added Sucessfully'));
		die();
	

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
		die();
	}
	
 
}




function moi_get_category()
{
	$response = moi_do_curl('/inventory-svc/api/Category','GET');
	if($response->success==true)
	{
		
		foreach($response->data as $data)
		{  

		$categoryName = $data->categoryName;
		$term_id = $data->id;
		$cat_exists  = term_exists( $categoryName, $taxonomy = 'product_cat', $parent = null );
		$cat_id = $cat_exists['term_id'];
		
			if(isset($cat_exists))
					{

						update_term_meta( $cat_id, "t_id" , $term_id );  
						
					}
					else {

						$categoryslug = str_replace(" ", "-", strtolower($data->categoryName));
						$cid = wp_insert_term( $data->categoryName, 'product_cat', array('slug' => $categoryslug ) ); 
						
						if (! is_wp_error( $cid ) )
							{
								$l_term = isset( $cid['term_id'] ) ? $cid['term_id'] : 0;
								add_term_meta( $l_term, "t_id" , $term_id ); 
								
							}
							else
							{
								// Trouble in Paradise:
								echo $cid->get_error_message();
							}


					
						}
					}
			
		
		
			    echo json_encode(array('code' => 200,'record' => 'Categories Added Sucessfully'));
				die();
			
		
			}
			else
			{
				echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
				die();
			}
	
}	



function moi_reg_locations()
{
	$response = moi_do_curl('/account-svc/api/GetLocationSetup?isOnlineStore=True','GET' );
	if($response->success==true)	{
		$storedata = array();
		foreach($response->data as $key => $data){   
        $locationName = $data->locationName;
        $locationId = $data->locationId;
        $phone = $data->phone;
        $address = $data->address;
        $city = $data->city;
        $state = $data->state;
        $zip = $data->zip;
        $country = $data->country;
		$id = $data->id;
        $cat_exists  = term_exists( $locationName, $taxonomy = 'product_location', $parent = null );
        $cat_id = $cat_exists['term_id'];
		$storedata[$key]['id'] =  $locationId;
		$storedata[$key]['name'] =  $locationName;		

        if(isset($cat_exists))
            {
                update_term_meta( $cat_id, "t_id" , $locationId ); 
                update_term_meta( $cat_id, "location_phone" , $phone );   
                update_term_meta( $cat_id, "location_address" , $address );   
                update_term_meta( $cat_id, "location_city" , $city );   
                update_term_meta( $cat_id, "location_state" , $state );    
                update_term_meta( $cat_id, "location_zip" , $zip );    
                update_term_meta( $cat_id, "location_country" , $country );            
            
            }
        else {        
          
         
           $categoryslug = str_replace(" ", "-", strtolower($data->locationName));
           $cid = wp_insert_term( $data->locationName, 'product_location', array('slug' => $categoryslug ) ); 
         
          if (! is_wp_error( $cid ) )
            {
                
                $l_term = isset( $cid['term_id'] ) ? $cid['term_id'] : 0;
                add_term_meta( $l_term, "t_id" , $locationId ); 
                add_term_meta( $l_term, "location_phone" , $phone );   
                add_term_meta( $l_term, "location_address" , $address );   
                add_term_meta( $l_term, "location_city" , $city );   
                add_term_meta( $l_term, "location_state" , $state );    
                add_term_meta( $l_term, "location_zip" , $zip );    
                add_term_meta( $l_term, "location_country" , $country );  
            }
            else
            {
                // Trouble in Paradise:
                echo $cid->get_error_message();
            }



      	  }
		}

		update_option( 'store_location_data', $storedata );

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
		die();
	}
 
}



function moi_reg_locationUser()
{

	$post_fields= [
		"Name" => "GetMe"
	  ];
	$response = moi_do_curl('/account-svc/api/B2CGraphClientApi','POST', $post_fields );
	if($response->success==true)	{
		$storedata = array();
		$data = $response->data;		
        $userID = $data->userID;
        $firstName = $data->firstName;
		$lastName = $data->lastName;
		$companyName = $data->companyName;
		$displayName = $data->displayName;
		$storedata['userID'] =  $userID;
		$storedata['firstName'] =  $firstName;
		$storedata['lastName'] =  $lastName;
		$storedata['companyName'] =  $companyName;
		$storedata['displayName'] =  $displayName;     

		update_option( 'store_location_userdata', $storedata );

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
		die();
	}
 
}




function moi_get_manufacturer()
{
	$response = moi_do_curl('/inventory-svc/api/Manufacturer','GET' );
	if($response->success==true)
	{
		
		foreach($response->data as $data)
		{
   
        $manufacturerName = $data->manufacturerName;
        $manufacturerid = $data->id;
        $isActive = $data->isActive;

  
        $cat_exists  = term_exists( $manufacturerName, $taxonomy = 'manufacturer', $parent = null );
        $cat_id = $cat_exists['term_id'];
        if(isset($cat_exists))
            {
                update_term_meta( $cat_id, "t_id" , $manufacturerid );             
            
            }
        else {      
          
         
           $categoryslug = str_replace(" ", "-", strtolower($data->manufacturerName));
           $cid = wp_insert_term( $data->manufacturerName, 'manufacturer', array('slug' => $categoryslug ) ); 
         
          if (! is_wp_error( $cid ) )
            {
                
                $l_term = isset( $cid['term_id'] ) ? $cid['term_id'] : 0;
                add_term_meta( $l_term, "t_id" , $manufacturerid ); 
                
            }
            else
            {
                // Trouble in Paradise:
                echo $cid->get_error_message();
            }



        }
		}


       echo json_encode(array('code' => 200,'record' => 'Manufacturer Added'));
	   die();

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
		die();
	}
 
}

function moi_get_vendors()
{
	$response = moi_do_curl('/inventory-svc/api/Vendor','GET' );
	if($response->success==true)
	{
		
		foreach($response->data as $data)
		{
   
			$vendorName = $data->vendorName;
			$vendorid = $data->id;
			$account = $data->account;
			$company = $data->company;
			$street = $data->street;
			$street = $data->street;
			$state = $data->state;
			$zip = $data->zip;
			$phone = $data->phone;
			$city = $data->city;
		

  
        $cat_exists  = term_exists( $vendorName, $taxonomy = 'vendors', $parent = null );
        $cat_id = $cat_exists['term_id'];
        if(isset($cat_exists))
            {
                update_term_meta( $cat_id, "t_id" , $vendorid );             
            
            }
        else 
			{              
			
				$categoryslug = str_replace(" ", "-", strtolower($data->vendorName));
				$cid = wp_insert_term( $data->vendorName, 'vendors', array('slug' => $categoryslug ) ); 
				
				if (! is_wp_error( $cid ) )
					{
						
						$l_term = isset( $cid['term_id'] ) ? $cid['term_id'] : 0;
						add_term_meta( $l_term, "t_id" , $vendorid ); 
						
					}
					else
					{
						// Trouble in Paradise:
						echo $cid->get_error_message();
					}



       		 }
		}


        echo json_encode(array('code' => 200,'record' => 'Vendors Added'));
		die();

	

	}
	else
	{
		echo json_encode(array('code' => 404,'record' => 'Record Not Found'));
	 	die();
	}
 
}



add_action('woocommerce_before_account_orders', __NAMESPACE__ . '\\woocommerce_account_orders',50);
function woocommerce_account_orders( ) {	
 require_once MOI_CORE_INC . 'moi-orders.php';      
}

require_once MOI_CORE_INC . 'moi-api.php';    



/**
 * Processes and validates form data.
 *
 * @return void
 */
function membersone_integration_init() {
	if ( ! current_user_can( 'manage_options' ) ) {
		die( esc_attr( __( 'You don\'t have the required permissions to edit this Plugin' ) ) );
	}

	$response['is_submited'] = false;
	$response['status'] = '';

	if ( isset( $_POST['moi_enable'] ) ) {
		if ( ! check_admin_referer( 'membersone-integration-nonce', 'moi_nonce_field' ) ) {
			die( esc_attr( __( 'Validation Error!' ) ) );
		}
		$response['is_submited'] = true;
		$response['status'] = 'success';
		$response['message'] = 'Configurations saved successfully :)';
		moi_update_options_data(moi_sanitize_configuration_data($_POST));
	}

	$options = moi_get_options_data();
	// Load the configurations
	if ( file_exists( MOI_CORE_VIEWS . 'configurations.php' ) ) {
		require_once MOI_CORE_VIEWS . 'configurations.php';
	}
	
}

/**
 * Sanitizes the configurations data.
 *
 * @param array $post_data Form post data.
 *
 * @return array
 */
function moi_sanitize_configuration_data( array $post_data ) {
	$configurations = array();
	$configurations['moi_enable']  = is_numeric( $post_data['moi_enable'] ) ? $post_data['moi_enable'] : 0;
	$configurations['moi_vendor_id'] =  $post_data['moi_vendor_id'];
	$configurations['moi_vendor_secret_token'] =  $post_data['moi_vendor_secret_token'] ;
	$configurations['moi_vendor_api'] =  $post_data['moi_vendor_api'] ;
	$configurations['store_location'] =  $post_data['store_location'] ;	
	$configurations['moi_vendor_wild'] =  $post_data['moi_vendor_wild'] ;
	return $configurations;
}
/**
 * Update the plugins options data.
 *
 * @param array  $configurations Sanitized configuration data.
 *
 * @return void
 */
function moi_update_options_data( $configurations) {
	foreach ($configurations as $key=>$value) {
		update_option( $key, $value );
	}

	$token = moi_get_token();	
	if(!empty($token))
	{
		update_option('moi_token' , $token);
		moi_reg_locations();
		moi_reg_locationUser();
	}
	
}



/**
 * Gets the configurations.
 *
 * @param string $lang_code The language code.
 *
 * @return array
 */
function moi_get_options_data() {
	return array(
		'moi_enable' => get_option('moi_enable'),
		'moi_vendor_id' => get_option('moi_vendor_id'),
		'moi_vendor_secret_token' => get_option('moi_vendor_secret_token'),
		'moi_vendor_api' => get_option('moi_vendor_api'),	
		'moi_vendor_wild' => get_option('moi_vendor_wild'),	
		'store_location' => get_option('store_location'),		
		'moi_menu_icon' => get_option('moi_menu_icon'),
	);
}





add_filter( 'cron_schedules', __NAMESPACE__ . '\\zoi_cron_three_minutes' );
function zoi_cron_three_minutes( $schedules ) {
    $schedules['every_three_minutes'] = array(
            'interval'  => 180,
            'display'   => __( 'Every 3 Minutes', 'textdomain' )
    );
    return $schedules;
}

// Schedule an action if it's not already scheduled
if ( ! wp_next_scheduled( 'zoi_cron_three_minutes' ) ) {
    wp_schedule_event( time(), 'every_three_minutes', 'zoi_cron_three_minutes' );
}

// Hook into that action that'll fire every three minutes
add_action( 'zoi_cron_three_minutes', __NAMESPACE__ . '\\every_three_minutes_event_func' );
function every_three_minutes_event_func() {	
	//moi_get_vendors();
	//moi_get_category();
	//moi_get_department();
	//moi_get_manufacturer();
	 //moi_register_product();
	$post = array(
		'post_title' => "CJ-V6 -". date("Y-m-d g:i:s"),
		'post_content' => date("Y-m-d H:i:s"),
		'post_status' => 'publish',
		'post_date' => date( 'Y-m-d H:i:s', time()),
		'post_type' => 'jobs',
		);
		$post_id = wp_insert_post( $post , $wp_error );			
		moi_update_products($post_id);
	
}

function moi_update_products ($lastId) {

	$post_object = get_post($lastId);
	$post_date = date( 'F jS, Y', strtotime( $post_object->post_date ) );
	$last_import = $post_object->post_date;
	updated_inventory_items($last_import);
	update_products_stock($last_import);
}

add_action('wp_head', __NAMESPACE__ . '\\cvf_ps_enqueue_datepicker');
function cvf_ps_enqueue_datepicker() {
    wp_enqueue_script('jquery-ui-datepicker');
    wp_enqueue_style('jquery-style', 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/smoothness/jquery-ui.css');
   
}
$option=moi_get_options_data();
if($option['moi_menu_icon']==1)
{
	function new_nav_menu_items($items) {
		$url='';
		$url=home_url(); 	
		if (strpos($url,'ondelivery') !== false) {
			$url=	home_url('/index.php/create-membership'); 	
		} else {
			$url=	home_url('/create-membership'); 
		}
		$homelink = '<li class="createmembership"><a href="' .$url . '">' . __('Create a MemberShip') . '</a></li>';
		$items = $items . $homelink;
		return $items;
	}
	add_filter( 'wp_nav_menu_items',  __NAMESPACE__ . '\\new_nav_menu_items' );
}





